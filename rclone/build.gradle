// Rclone version - any git reference (tag, branch, hash) should work
def buildTag = 'v1.55.0'

//
// DO NOT EDIT ANYTHING BELOW
//
import java.nio.file.Paths
def repository = 'github.com/rclone/rclone'
def repositoryRef = repository + '@' + buildTag
def ldflags = "-X github.com/rclone/rclone/fs.Version=${buildTag}-rcx"
def goPath = Paths.get(projectDir.absolutePath, 'gopath').toAbsolutePath().toString()
def appLibPath = Paths.get(projectDir.absolutePath, '../app/lib').toAbsolutePath().toString()
def osName = System.properties['os.name'].toLowerCase()
def osArch = System.properties['os.arch']
def String os
if (osName.contains('windows')) {
    if(osArch.equals('amd64')) {
        os = "windows-x86_64"
    } else if (osArch.equals('x86')) {
        os = "windows"
    }
} else if (osName.contains("linux")) {
    os = "linux-x86_64"
} else if (osName.contains('mac')) {
    os = "darwin-x86_64"
}

task fetchRclone(type: Exec) {
    mkdir "gopath"
    environment 'GOPATH', Paths.get(projectDir.absolutePath, 'gopath')
    environment "GO111MODULE", "on"
    commandLine 'go', 'get', '-d', repositoryRef
}

task cleanNative {
    enabled = false
    doLast {
        delete "${appLibPath}/armeabi-v7a/librclone.so"
        delete "${appLibPath}/arm64-v8a/librclone.so"
        delete "${appLibPath}/x86/librclone.so"
        delete "${appLibPath}/x86_64/librclone.so"
    }
}

task buildArm(type: Exec) {
    dependsOn fetchRclone
    environment 'GOPATH', Paths.get(projectDir.absolutePath, 'gopath')
    def String crossCompiler = Paths.get(System.getenv('ANDROID_HOME'), 'ndk', '21.3.6528147', 'toolchains', 'llvm', 'prebuilt', os, 'bin', 'armv7a-linux-androideabi21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'arm'
    environment 'GOARM', '7'
    environment 'CGO_ENABLED', '1'
    environment 'CGO_LDFLAGS', "-fuse-ld=lld -s -w"
    workingDir Paths.get(goPath, "pkg/mod/${repositoryRef}".split('/'))
    def artifactTarget = "${appLibPath}/armeabi-v7a/librclone.so"
    commandLine 'go', 'build', '-v', '-tags', 'android', '-trimpath', '-ldflags', ldflags, '-o', artifactTarget, '.'
}

task buildArm64(type: Exec) {
    dependsOn fetchRclone
    environment 'GOPATH', Paths.get(projectDir.absolutePath, 'gopath')
    def String crossCompiler = Paths.get(System.getenv('ANDROID_HOME'), 'ndk', '21.3.6528147', 'toolchains', 'llvm', 'prebuilt', os, 'bin', 'aarch64-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'arm64'
    environment 'CGO_ENABLED', '1'
    environment 'CGO_LDFLAGS', "-fuse-ld=lld -s -w"
    workingDir Paths.get(goPath, "pkg/mod/${repositoryRef}".split('/'))
    def artifactTarget = "${appLibPath}/arm64-v8a/librclone.so"
    commandLine 'go', 'build', '-v', '-tags', 'android', '-trimpath', '-ldflags', ldflags, '-o', artifactTarget, '.'}

task buildx86(type: Exec) {
    dependsOn fetchRclone
    environment 'GOPATH', Paths.get(projectDir.absolutePath, 'gopath')
    def String crossCompiler = Paths.get(System.getenv('ANDROID_HOME'), 'ndk', '21.3.6528147', 'toolchains', 'llvm', 'prebuilt', os, 'bin', 'i686-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', '386'
    environment 'CGO_ENABLED', '1'
    environment 'CGO_LDFLAGS', "-fuse-ld=lld -s -w"
    workingDir Paths.get(goPath, "pkg/mod/${repositoryRef}".split('/'))
    def artifactTarget = "${appLibPath}/x86/librclone.so"
    commandLine 'go', 'build', '-v', '-tags', 'android', '-trimpath', '-ldflags', ldflags, '-o', artifactTarget, '.'
}

task buildx64(type: Exec) {
    dependsOn fetchRclone
    environment 'GOPATH', Paths.get(projectDir.absolutePath, 'gopath')
    def String crossCompiler = Paths.get(System.getenv('ANDROID_HOME'), 'ndk', '21.3.6528147', 'toolchains', 'llvm', 'prebuilt', os, 'bin', 'x86_64-linux-android21-clang')
    environment 'CC', crossCompiler
    environment 'CC_FOR_TARGET', crossCompiler
    environment 'GOOS', 'android'
    environment 'GOARCH', 'amd64'
    environment 'CGO_ENABLED', '1'
    environment 'CGO_LDFLAGS', "-fuse-ld=lld -s -w"
    workingDir Paths.get(goPath, "pkg/mod/${repositoryRef}".split('/'))
    def artifactTarget = "${appLibPath}/x86_64/librclone.so"
    commandLine 'go', 'build', '-v', '-tags', 'android', '-trimpath', '-ldflags', ldflags, '-o', artifactTarget, '.'
}

task buildNative {
    dependsOn fetchRclone
    dependsOn buildArm
    dependsOn buildArm64
    dependsOn buildx86
    dependsOn buildx64
}

task prepareKotlinBuildScriptModel {
    // ignore, does not build from kotlin sources
}

buildNative.mustRunAfter(buildArm, buildArm64, buildx86, buildx64)
defaultTasks 'buildNative'
